
vfd-display-v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000690  00000704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c5  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000331  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045c  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030e  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000505  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	a3 c1       	rjmp	.+838    	; 0x35a <__vector_9>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e9       	ldi	r30, 0x90	; 144
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 32       	cpi	r26, 0x2E	; 46
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	12 d0       	rcall	.+36     	; 0x7c <main>
  58:	19 c3       	rjmp	.+1586   	; 0x68c <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <initTimer>:
	}
	
}

void initTimer(void){
	TCCR2A = 0x00;
  5c:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = _BV(CS22) | _BV(CS20);
  60:	85 e0       	ldi	r24, 0x05	; 5
  62:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0x00;
  66:	10 92 b2 00 	sts	0x00B2, r1
	TIMSK2 = _BV(TOIE2);
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 70 00 	sts	0x0070, r24
	TIFR2 = _BV(OCF2B) | _BV(OCF2A) | _BV(TOV2);
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	87 bb       	out	0x17, r24	; 23
	ASSR = _BV(AS2);
  74:	80 e2       	ldi	r24, 0x20	; 32
  76:	80 93 b6 00 	sts	0x00B6, r24
  7a:	08 95       	ret

0000007c <main>:
#include "vfd.h"

void initTimer(void);


int main(void){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	a0 97       	sbiw	r28, 0x20	; 32
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	
	initTimer();
  90:	e5 df       	rcall	.-54     	; 0x5c <initTimer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	84 e3       	ldi	r24, 0x34	; 52
  96:	9c e0       	ldi	r25, 0x0C	; 12
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x26>
  a2:	00 00       	nop
	
	_delay_ms(500);

	Vfd_ctrl vfdisplay;
	
	vfdisplay.vfd_wr_port = &PORTC;
  a4:	98 e2       	ldi	r25, 0x28	; 40
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	c9 2e       	mov	r12, r25
  aa:	99 83       	std	Y+1, r25	; 0x01
  ac:	3a 83       	std	Y+2, r19	; 0x02
	vfdisplay.vfd_wr_ddr = &DDRC;
  ae:	87 e2       	ldi	r24, 0x27	; 39
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	e8 2e       	mov	r14, r24
  b4:	8b 83       	std	Y+3, r24	; 0x03
  b6:	2c 83       	std	Y+4, r18	; 0x04
	vfdisplay.vfd_wr_pin_mask = _BV(PC0);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	4d 83       	std	Y+5, r20	; 0x05
	vfdisplay.vfd_a0_port = &PORTC;
  bc:	19 2f       	mov	r17, r25
  be:	9e 83       	std	Y+6, r25	; 0x06
  c0:	3f 83       	std	Y+7, r19	; 0x07
	vfdisplay.vfd_a0_ddr = &DDRC;
  c2:	38 2f       	mov	r19, r24
  c4:	88 87       	std	Y+8, r24	; 0x08
  c6:	29 87       	std	Y+9, r18	; 0x09
	vfdisplay.vfd_a0_pin_mask = _BV(PC1);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	8a 87       	std	Y+10, r24	; 0x0a
	vfdisplay.vfd_data_port = &PORTD;
  cc:	8b e2       	ldi	r24, 0x2B	; 43
  ce:	68 2f       	mov	r22, r24
  d0:	8b 87       	std	Y+11, r24	; 0x0b
  d2:	1c 86       	std	Y+12, r1	; 0x0c
	vfdisplay.vfd_data_ddr = &DDRD;
  d4:	8a e2       	ldi	r24, 0x2A	; 42
  d6:	8d 87       	std	Y+13, r24	; 0x0d
  d8:	1e 86       	std	Y+14, r1	; 0x0e
	
	vfd_init(vfdisplay);
  da:	d1 2c       	mov	r13, r1
  dc:	f1 2c       	mov	r15, r1
  de:	0d 81       	ldd	r16, Y+5	; 0x05
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	5a 85       	ldd	r21, Y+10	; 0x0a
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 d2       	rcall	.+1284   	; 0x5ee <vfd_init>
	vfd_putc(vfdisplay,VFD_CMD_DC5);
  ea:	0f 2e       	mov	r0, r31
  ec:	f5 e1       	ldi	r31, 0x15	; 21
  ee:	af 2e       	mov	r10, r31
  f0:	f0 2d       	mov	r31, r0
  f2:	c9 80       	ldd	r12, Y+1	; 0x01
  f4:	da 80       	ldd	r13, Y+2	; 0x02
  f6:	eb 80       	ldd	r14, Y+3	; 0x03
  f8:	fc 80       	ldd	r15, Y+4	; 0x04
  fa:	0d 81       	ldd	r16, Y+5	; 0x05
  fc:	1e 81       	ldd	r17, Y+6	; 0x06
  fe:	2f 81       	ldd	r18, Y+7	; 0x07
 100:	38 85       	ldd	r19, Y+8	; 0x08
 102:	49 85       	ldd	r20, Y+9	; 0x09
 104:	5a 85       	ldd	r21, Y+10	; 0x0a
 106:	6b 85       	ldd	r22, Y+11	; 0x0b
 108:	7c 85       	ldd	r23, Y+12	; 0x0c
 10a:	8d 85       	ldd	r24, Y+13	; 0x0d
 10c:	9e 85       	ldd	r25, Y+14	; 0x0e
 10e:	2f d1       	rcall	.+606    	; 0x36e <vfd_putc>
	
	char currentTime[] = "13:37";
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	ec e1       	ldi	r30, 0x1C	; 28
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	de 01       	movw	r26, r28
 118:	1f 96       	adiw	r26, 0x0f	; 15
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x9e>
	char sunriseTime[] = "14:63";
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	e2 e2       	ldi	r30, 0x22	; 34
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	55 96       	adiw	r26, 0x15	; 21
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xb0>
	char sunsetTime[] = "42:42";
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	e8 e2       	ldi	r30, 0x28	; 40
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	de 01       	movw	r26, r28
 13c:	5b 96       	adiw	r26, 0x1b	; 27
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	8a 95       	dec	r24
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xc2>
	
	sei();
 146:	78 94       	sei
		vfd_puts(vfdisplay," Sunset: ");
		vfd_puts(vfdisplay,sunsetTime);
		
		vfd_putcmd(vfdisplay,0x28);			// Set cursor position to lower leftmost position
		
		vfd_putc(vfdisplay,'[');
 148:	0f 2e       	mov	r0, r31
 14a:	fc e1       	ldi	r31, 0x1C	; 28
 14c:	9f 2e       	mov	r9, r31
 14e:	f0 2d       	mov	r31, r0
	struct tm rtc_time;
	
	
    while(1){
		
		vfd_putcmd(vfdisplay,0x00);			// Set cursor position to upper leftmost position
 150:	a1 2c       	mov	r10, r1
 152:	c9 80       	ldd	r12, Y+1	; 0x01
 154:	da 80       	ldd	r13, Y+2	; 0x02
 156:	eb 80       	ldd	r14, Y+3	; 0x03
 158:	fc 80       	ldd	r15, Y+4	; 0x04
 15a:	0d 81       	ldd	r16, Y+5	; 0x05
 15c:	1e 81       	ldd	r17, Y+6	; 0x06
 15e:	2f 81       	ldd	r18, Y+7	; 0x07
 160:	38 85       	ldd	r19, Y+8	; 0x08
 162:	49 85       	ldd	r20, Y+9	; 0x09
 164:	5a 85       	ldd	r21, Y+10	; 0x0a
 166:	6b 85       	ldd	r22, Y+11	; 0x0b
 168:	7c 85       	ldd	r23, Y+12	; 0x0c
 16a:	8d 85       	ldd	r24, Y+13	; 0x0d
 16c:	9e 85       	ldd	r25, Y+14	; 0x0e
 16e:	4d d1       	rcall	.+666    	; 0x40a <vfd_putcmd>
		
		vfd_puts(vfdisplay,"Time: ");
 170:	0f 2e       	mov	r0, r31
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	af 2e       	mov	r10, r31
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	bf 2e       	mov	r11, r31
 17a:	f0 2d       	mov	r31, r0
 17c:	c9 80       	ldd	r12, Y+1	; 0x01
 17e:	da 80       	ldd	r13, Y+2	; 0x02
 180:	eb 80       	ldd	r14, Y+3	; 0x03
 182:	fc 80       	ldd	r15, Y+4	; 0x04
 184:	0d 81       	ldd	r16, Y+5	; 0x05
 186:	1e 81       	ldd	r17, Y+6	; 0x06
 188:	2f 81       	ldd	r18, Y+7	; 0x07
 18a:	38 85       	ldd	r19, Y+8	; 0x08
 18c:	49 85       	ldd	r20, Y+9	; 0x09
 18e:	5a 85       	ldd	r21, Y+10	; 0x0a
 190:	6b 85       	ldd	r22, Y+11	; 0x0b
 192:	7c 85       	ldd	r23, Y+12	; 0x0c
 194:	8d 85       	ldd	r24, Y+13	; 0x0d
 196:	9e 85       	ldd	r25, Y+14	; 0x0e
 198:	85 d1       	rcall	.+778    	; 0x4a4 <vfd_puts>
		vfd_puts(vfdisplay,(char*)currentTime);
 19a:	ce 01       	movw	r24, r28
 19c:	0f 96       	adiw	r24, 0x0f	; 15
 19e:	5c 01       	movw	r10, r24
 1a0:	c9 80       	ldd	r12, Y+1	; 0x01
 1a2:	da 80       	ldd	r13, Y+2	; 0x02
 1a4:	eb 80       	ldd	r14, Y+3	; 0x03
 1a6:	fc 80       	ldd	r15, Y+4	; 0x04
 1a8:	0d 81       	ldd	r16, Y+5	; 0x05
 1aa:	1e 81       	ldd	r17, Y+6	; 0x06
 1ac:	2f 81       	ldd	r18, Y+7	; 0x07
 1ae:	38 85       	ldd	r19, Y+8	; 0x08
 1b0:	49 85       	ldd	r20, Y+9	; 0x09
 1b2:	5a 85       	ldd	r21, Y+10	; 0x0a
 1b4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1b6:	7c 85       	ldd	r23, Y+12	; 0x0c
 1b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 1bc:	73 d1       	rcall	.+742    	; 0x4a4 <vfd_puts>
		vfd_puts(vfdisplay," Sunrise: ");
 1be:	0f 2e       	mov	r0, r31
 1c0:	f7 e0       	ldi	r31, 0x07	; 7
 1c2:	af 2e       	mov	r10, r31
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	bf 2e       	mov	r11, r31
 1c8:	f0 2d       	mov	r31, r0
 1ca:	c9 80       	ldd	r12, Y+1	; 0x01
 1cc:	da 80       	ldd	r13, Y+2	; 0x02
 1ce:	eb 80       	ldd	r14, Y+3	; 0x03
 1d0:	fc 80       	ldd	r15, Y+4	; 0x04
 1d2:	0d 81       	ldd	r16, Y+5	; 0x05
 1d4:	1e 81       	ldd	r17, Y+6	; 0x06
 1d6:	2f 81       	ldd	r18, Y+7	; 0x07
 1d8:	38 85       	ldd	r19, Y+8	; 0x08
 1da:	49 85       	ldd	r20, Y+9	; 0x09
 1dc:	5a 85       	ldd	r21, Y+10	; 0x0a
 1de:	6b 85       	ldd	r22, Y+11	; 0x0b
 1e0:	7c 85       	ldd	r23, Y+12	; 0x0c
 1e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e6:	5e d1       	rcall	.+700    	; 0x4a4 <vfd_puts>
		vfd_puts(vfdisplay,sunriseTime);
 1e8:	ce 01       	movw	r24, r28
 1ea:	45 96       	adiw	r24, 0x15	; 21
 1ec:	5c 01       	movw	r10, r24
 1ee:	c9 80       	ldd	r12, Y+1	; 0x01
 1f0:	da 80       	ldd	r13, Y+2	; 0x02
 1f2:	eb 80       	ldd	r14, Y+3	; 0x03
 1f4:	fc 80       	ldd	r15, Y+4	; 0x04
 1f6:	0d 81       	ldd	r16, Y+5	; 0x05
 1f8:	1e 81       	ldd	r17, Y+6	; 0x06
 1fa:	2f 81       	ldd	r18, Y+7	; 0x07
 1fc:	38 85       	ldd	r19, Y+8	; 0x08
 1fe:	49 85       	ldd	r20, Y+9	; 0x09
 200:	5a 85       	ldd	r21, Y+10	; 0x0a
 202:	6b 85       	ldd	r22, Y+11	; 0x0b
 204:	7c 85       	ldd	r23, Y+12	; 0x0c
 206:	8d 85       	ldd	r24, Y+13	; 0x0d
 208:	9e 85       	ldd	r25, Y+14	; 0x0e
 20a:	4c d1       	rcall	.+664    	; 0x4a4 <vfd_puts>
		vfd_puts(vfdisplay," Sunset: ");
 20c:	0f 2e       	mov	r0, r31
 20e:	f2 e1       	ldi	r31, 0x12	; 18
 210:	af 2e       	mov	r10, r31
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	bf 2e       	mov	r11, r31
 216:	f0 2d       	mov	r31, r0
 218:	c9 80       	ldd	r12, Y+1	; 0x01
 21a:	da 80       	ldd	r13, Y+2	; 0x02
 21c:	eb 80       	ldd	r14, Y+3	; 0x03
 21e:	fc 80       	ldd	r15, Y+4	; 0x04
 220:	0d 81       	ldd	r16, Y+5	; 0x05
 222:	1e 81       	ldd	r17, Y+6	; 0x06
 224:	2f 81       	ldd	r18, Y+7	; 0x07
 226:	38 85       	ldd	r19, Y+8	; 0x08
 228:	49 85       	ldd	r20, Y+9	; 0x09
 22a:	5a 85       	ldd	r21, Y+10	; 0x0a
 22c:	6b 85       	ldd	r22, Y+11	; 0x0b
 22e:	7c 85       	ldd	r23, Y+12	; 0x0c
 230:	8d 85       	ldd	r24, Y+13	; 0x0d
 232:	9e 85       	ldd	r25, Y+14	; 0x0e
 234:	37 d1       	rcall	.+622    	; 0x4a4 <vfd_puts>
		vfd_puts(vfdisplay,sunsetTime);
 236:	ce 01       	movw	r24, r28
 238:	4b 96       	adiw	r24, 0x1b	; 27
 23a:	5c 01       	movw	r10, r24
 23c:	c9 80       	ldd	r12, Y+1	; 0x01
 23e:	da 80       	ldd	r13, Y+2	; 0x02
 240:	eb 80       	ldd	r14, Y+3	; 0x03
 242:	fc 80       	ldd	r15, Y+4	; 0x04
 244:	0d 81       	ldd	r16, Y+5	; 0x05
 246:	1e 81       	ldd	r17, Y+6	; 0x06
 248:	2f 81       	ldd	r18, Y+7	; 0x07
 24a:	38 85       	ldd	r19, Y+8	; 0x08
 24c:	49 85       	ldd	r20, Y+9	; 0x09
 24e:	5a 85       	ldd	r21, Y+10	; 0x0a
 250:	6b 85       	ldd	r22, Y+11	; 0x0b
 252:	7c 85       	ldd	r23, Y+12	; 0x0c
 254:	8d 85       	ldd	r24, Y+13	; 0x0d
 256:	9e 85       	ldd	r25, Y+14	; 0x0e
 258:	25 d1       	rcall	.+586    	; 0x4a4 <vfd_puts>
		
		vfd_putcmd(vfdisplay,0x28);			// Set cursor position to lower leftmost position
 25a:	0f 2e       	mov	r0, r31
 25c:	f8 e2       	ldi	r31, 0x28	; 40
 25e:	af 2e       	mov	r10, r31
 260:	f0 2d       	mov	r31, r0
 262:	c9 80       	ldd	r12, Y+1	; 0x01
 264:	da 80       	ldd	r13, Y+2	; 0x02
 266:	eb 80       	ldd	r14, Y+3	; 0x03
 268:	fc 80       	ldd	r15, Y+4	; 0x04
 26a:	0d 81       	ldd	r16, Y+5	; 0x05
 26c:	1e 81       	ldd	r17, Y+6	; 0x06
 26e:	2f 81       	ldd	r18, Y+7	; 0x07
 270:	38 85       	ldd	r19, Y+8	; 0x08
 272:	49 85       	ldd	r20, Y+9	; 0x09
 274:	5a 85       	ldd	r21, Y+10	; 0x0a
 276:	6b 85       	ldd	r22, Y+11	; 0x0b
 278:	7c 85       	ldd	r23, Y+12	; 0x0c
 27a:	8d 85       	ldd	r24, Y+13	; 0x0d
 27c:	9e 85       	ldd	r25, Y+14	; 0x0e
 27e:	c5 d0       	rcall	.+394    	; 0x40a <vfd_putcmd>
		
		vfd_putc(vfdisplay,'[');
 280:	0f 2e       	mov	r0, r31
 282:	fb e5       	ldi	r31, 0x5B	; 91
 284:	af 2e       	mov	r10, r31
 286:	f0 2d       	mov	r31, r0
 288:	c9 80       	ldd	r12, Y+1	; 0x01
 28a:	da 80       	ldd	r13, Y+2	; 0x02
 28c:	eb 80       	ldd	r14, Y+3	; 0x03
 28e:	fc 80       	ldd	r15, Y+4	; 0x04
 290:	0d 81       	ldd	r16, Y+5	; 0x05
 292:	1e 81       	ldd	r17, Y+6	; 0x06
 294:	2f 81       	ldd	r18, Y+7	; 0x07
 296:	38 85       	ldd	r19, Y+8	; 0x08
 298:	49 85       	ldd	r20, Y+9	; 0x09
 29a:	5a 85       	ldd	r21, Y+10	; 0x0a
 29c:	6b 85       	ldd	r22, Y+11	; 0x0b
 29e:	7c 85       	ldd	r23, Y+12	; 0x0c
 2a0:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2a4:	64 d0       	rcall	.+200    	; 0x36e <vfd_putc>
 2a6:	b9 2c       	mov	r11, r9
		
		for (uint8_t i = 0; i < 28; i++){
			vfd_putc(vfdisplay,'=');
 2a8:	0f 2e       	mov	r0, r31
 2aa:	fd e3       	ldi	r31, 0x3D	; 61
 2ac:	af 2e       	mov	r10, r31
 2ae:	f0 2d       	mov	r31, r0
 2b0:	c9 80       	ldd	r12, Y+1	; 0x01
 2b2:	da 80       	ldd	r13, Y+2	; 0x02
 2b4:	eb 80       	ldd	r14, Y+3	; 0x03
 2b6:	fc 80       	ldd	r15, Y+4	; 0x04
 2b8:	0d 81       	ldd	r16, Y+5	; 0x05
 2ba:	1e 81       	ldd	r17, Y+6	; 0x06
 2bc:	2f 81       	ldd	r18, Y+7	; 0x07
 2be:	38 85       	ldd	r19, Y+8	; 0x08
 2c0:	49 85       	ldd	r20, Y+9	; 0x09
 2c2:	5a 85       	ldd	r21, Y+10	; 0x0a
 2c4:	6b 85       	ldd	r22, Y+11	; 0x0b
 2c6:	7c 85       	ldd	r23, Y+12	; 0x0c
 2c8:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ca:	9e 85       	ldd	r25, Y+14	; 0x0e
 2cc:	50 d0       	rcall	.+160    	; 0x36e <vfd_putc>
 2ce:	ba 94       	dec	r11
		
		vfd_putcmd(vfdisplay,0x28);			// Set cursor position to lower leftmost position
		
		vfd_putc(vfdisplay,'[');
		
		for (uint8_t i = 0; i < 28; i++){
 2d0:	b1 10       	cpse	r11, r1
 2d2:	ea cf       	rjmp	.-44     	; 0x2a8 <main+0x22c>
			vfd_putc(vfdisplay,'=');
		}
		
		vfd_putc(vfdisplay,'>');
 2d4:	0f 2e       	mov	r0, r31
 2d6:	fe e3       	ldi	r31, 0x3E	; 62
 2d8:	af 2e       	mov	r10, r31
 2da:	f0 2d       	mov	r31, r0
 2dc:	c9 80       	ldd	r12, Y+1	; 0x01
 2de:	da 80       	ldd	r13, Y+2	; 0x02
 2e0:	eb 80       	ldd	r14, Y+3	; 0x03
 2e2:	fc 80       	ldd	r15, Y+4	; 0x04
 2e4:	0d 81       	ldd	r16, Y+5	; 0x05
 2e6:	1e 81       	ldd	r17, Y+6	; 0x06
 2e8:	2f 81       	ldd	r18, Y+7	; 0x07
 2ea:	38 85       	ldd	r19, Y+8	; 0x08
 2ec:	49 85       	ldd	r20, Y+9	; 0x09
 2ee:	5a 85       	ldd	r21, Y+10	; 0x0a
 2f0:	6b 85       	ldd	r22, Y+11	; 0x0b
 2f2:	7c 85       	ldd	r23, Y+12	; 0x0c
 2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f8:	3a d0       	rcall	.+116    	; 0x36e <vfd_putc>
		
		vfd_putcmd(vfdisplay,0x4F);			// Set cursor position to lower rightmost position
 2fa:	0f 2e       	mov	r0, r31
 2fc:	ff e4       	ldi	r31, 0x4F	; 79
 2fe:	af 2e       	mov	r10, r31
 300:	f0 2d       	mov	r31, r0
 302:	c9 80       	ldd	r12, Y+1	; 0x01
 304:	da 80       	ldd	r13, Y+2	; 0x02
 306:	eb 80       	ldd	r14, Y+3	; 0x03
 308:	fc 80       	ldd	r15, Y+4	; 0x04
 30a:	0d 81       	ldd	r16, Y+5	; 0x05
 30c:	1e 81       	ldd	r17, Y+6	; 0x06
 30e:	2f 81       	ldd	r18, Y+7	; 0x07
 310:	38 85       	ldd	r19, Y+8	; 0x08
 312:	49 85       	ldd	r20, Y+9	; 0x09
 314:	5a 85       	ldd	r21, Y+10	; 0x0a
 316:	6b 85       	ldd	r22, Y+11	; 0x0b
 318:	7c 85       	ldd	r23, Y+12	; 0x0c
 31a:	8d 85       	ldd	r24, Y+13	; 0x0d
 31c:	9e 85       	ldd	r25, Y+14	; 0x0e
 31e:	75 d0       	rcall	.+234    	; 0x40a <vfd_putcmd>
		vfd_putc(vfdisplay,']');
 320:	0f 2e       	mov	r0, r31
 322:	fd e5       	ldi	r31, 0x5D	; 93
 324:	af 2e       	mov	r10, r31
 326:	f0 2d       	mov	r31, r0
 328:	c9 80       	ldd	r12, Y+1	; 0x01
 32a:	da 80       	ldd	r13, Y+2	; 0x02
 32c:	eb 80       	ldd	r14, Y+3	; 0x03
 32e:	fc 80       	ldd	r15, Y+4	; 0x04
 330:	0d 81       	ldd	r16, Y+5	; 0x05
 332:	1e 81       	ldd	r17, Y+6	; 0x06
 334:	2f 81       	ldd	r18, Y+7	; 0x07
 336:	38 85       	ldd	r19, Y+8	; 0x08
 338:	49 85       	ldd	r20, Y+9	; 0x09
 33a:	5a 85       	ldd	r21, Y+10	; 0x0a
 33c:	6b 85       	ldd	r22, Y+11	; 0x0b
 33e:	7c 85       	ldd	r23, Y+12	; 0x0c
 340:	8d 85       	ldd	r24, Y+13	; 0x0d
 342:	9e 85       	ldd	r25, Y+14	; 0x0e
 344:	14 d0       	rcall	.+40     	; 0x36e <vfd_putc>
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	29 e6       	ldi	r18, 0x69	; 105
 34a:	88 e1       	ldi	r24, 0x18	; 24
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x2d0>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x2da>
 356:	00 00       	nop
 358:	fb ce       	rjmp	.-522    	; 0x150 <main+0xd4>

0000035a <__vector_9>:
	TIMSK2 = _BV(TOIE2);
	TIFR2 = _BV(OCF2B) | _BV(OCF2A) | _BV(TOV2);
	ASSR = _BV(AS2);
}

ISR(TIMER2_OVF_vect){
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
	
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <vfd_putc>:
	vfd_reset(vfd_ctrl);
	
}


void vfd_putc(Vfd_ctrl vfd_ctrl,char data){
 36e:	af 92       	push	r10
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	2e 97       	sbiw	r28, 0x0e	; 14
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	c9 82       	std	Y+1, r12	; 0x01
 392:	da 82       	std	Y+2, r13	; 0x02
 394:	eb 82       	std	Y+3, r14	; 0x03
 396:	fc 82       	std	Y+4, r15	; 0x04
 398:	0d 83       	std	Y+5, r16	; 0x05
 39a:	1e 83       	std	Y+6, r17	; 0x06
 39c:	2f 83       	std	Y+7, r18	; 0x07
 39e:	38 87       	std	Y+8, r19	; 0x08
 3a0:	49 87       	std	Y+9, r20	; 0x09
 3a2:	5a 87       	std	Y+10, r21	; 0x0a
 3a4:	6b 87       	std	Y+11, r22	; 0x0b
 3a6:	7c 87       	std	Y+12, r23	; 0x0c
 3a8:	8d 87       	std	Y+13, r24	; 0x0d
 3aa:	9e 87       	std	Y+14, r25	; 0x0e

	*vfd_ctrl.vfd_data_port = data;		// Character or command
 3ac:	eb 85       	ldd	r30, Y+11	; 0x0b
 3ae:	fc 85       	ldd	r31, Y+12	; 0x0c
 3b0:	a0 82       	st	Z, r10
	
	*vfd_ctrl.vfd_a0_port &= ~(vfd_ctrl.vfd_a0_pin_mask);	// Set low
 3b2:	8a 85       	ldd	r24, Y+10	; 0x0a
 3b4:	ee 81       	ldd	r30, Y+6	; 0x06
 3b6:	ff 81       	ldd	r31, Y+7	; 0x07
 3b8:	90 81       	ld	r25, Z
 3ba:	80 95       	com	r24
 3bc:	89 23       	and	r24, r25
 3be:	80 83       	st	Z, r24
	
	*vfd_ctrl.vfd_wr_port &= ~(vfd_ctrl.vfd_wr_pin_mask);	// Set low
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	e9 81       	ldd	r30, Y+1	; 0x01
 3c4:	fa 81       	ldd	r31, Y+2	; 0x02
 3c6:	90 81       	ld	r25, Z
 3c8:	80 95       	com	r24
 3ca:	89 23       	and	r24, r25
 3cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <vfd_putc+0x62>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <vfd_putc+0x68>
	_delay_us(1);											// Delay according to datasheet
	*vfd_ctrl.vfd_wr_port |= vfd_ctrl.vfd_wr_pin_mask;		// Set high
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	90 81       	ld	r25, Z
 3da:	89 2b       	or	r24, r25
 3dc:	80 83       	st	Z, r24
 3de:	8f e8       	ldi	r24, 0x8F	; 143
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <vfd_putc+0x74>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <vfd_putc+0x7a>
 3e8:	00 00       	nop
	
	_delay_us(VFD_EXEC_DELAY);
	
}
 3ea:	2e 96       	adiw	r28, 0x0e	; 14
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	af 90       	pop	r10
 408:	08 95       	ret

0000040a <vfd_putcmd>:


void vfd_putcmd(Vfd_ctrl vfd_ctrl,char data){
 40a:	af 92       	push	r10
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	2e 97       	sbiw	r28, 0x0e	; 14
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	c9 82       	std	Y+1, r12	; 0x01
 42e:	da 82       	std	Y+2, r13	; 0x02
 430:	eb 82       	std	Y+3, r14	; 0x03
 432:	fc 82       	std	Y+4, r15	; 0x04
 434:	0d 83       	std	Y+5, r16	; 0x05
 436:	1e 83       	std	Y+6, r17	; 0x06
 438:	2f 83       	std	Y+7, r18	; 0x07
 43a:	38 87       	std	Y+8, r19	; 0x08
 43c:	49 87       	std	Y+9, r20	; 0x09
 43e:	5a 87       	std	Y+10, r21	; 0x0a
 440:	6b 87       	std	Y+11, r22	; 0x0b
 442:	7c 87       	std	Y+12, r23	; 0x0c
 444:	8d 87       	std	Y+13, r24	; 0x0d
 446:	9e 87       	std	Y+14, r25	; 0x0e
	
	*vfd_ctrl.vfd_data_port = data;		// Character or command
 448:	eb 85       	ldd	r30, Y+11	; 0x0b
 44a:	fc 85       	ldd	r31, Y+12	; 0x0c
 44c:	a0 82       	st	Z, r10
	
	*vfd_ctrl.vfd_a0_port |= vfd_ctrl.vfd_a0_pin_mask;	// Set high
 44e:	8a 85       	ldd	r24, Y+10	; 0x0a
 450:	ee 81       	ldd	r30, Y+6	; 0x06
 452:	ff 81       	ldd	r31, Y+7	; 0x07
 454:	90 81       	ld	r25, Z
 456:	89 2b       	or	r24, r25
 458:	80 83       	st	Z, r24
	
	*vfd_ctrl.vfd_wr_port &= ~(vfd_ctrl.vfd_wr_pin_mask);	// Set low
 45a:	8d 81       	ldd	r24, Y+5	; 0x05
 45c:	e9 81       	ldd	r30, Y+1	; 0x01
 45e:	fa 81       	ldd	r31, Y+2	; 0x02
 460:	90 81       	ld	r25, Z
 462:	80 95       	com	r24
 464:	89 23       	and	r24, r25
 466:	80 83       	st	Z, r24
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <vfd_putcmd+0x60>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <vfd_putcmd+0x66>
	_delay_us(1);											// Delay according to datasheet
	*vfd_ctrl.vfd_wr_port |= vfd_ctrl.vfd_wr_pin_mask;		// Set high
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	90 81       	ld	r25, Z
 474:	89 2b       	or	r24, r25
 476:	80 83       	st	Z, r24
 478:	8f e8       	ldi	r24, 0x8F	; 143
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <vfd_putcmd+0x72>
 480:	00 c0       	rjmp	.+0      	; 0x482 <vfd_putcmd+0x78>
 482:	00 00       	nop
		
	_delay_us(VFD_EXEC_DELAY);
	
}
 484:	2e 96       	adiw	r28, 0x0e	; 14
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	af 90       	pop	r10
 4a2:	08 95       	ret

000004a4 <vfd_puts>:


void vfd_puts(Vfd_ctrl vfd_ctrl, char *string){
 4a4:	8f 92       	push	r8
 4a6:	9f 92       	push	r9
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	2e 97       	sbiw	r28, 0x0e	; 14
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	c9 82       	std	Y+1, r12	; 0x01
 4ce:	da 82       	std	Y+2, r13	; 0x02
 4d0:	eb 82       	std	Y+3, r14	; 0x03
 4d2:	fc 82       	std	Y+4, r15	; 0x04
 4d4:	0d 83       	std	Y+5, r16	; 0x05
 4d6:	1e 83       	std	Y+6, r17	; 0x06
 4d8:	2f 83       	std	Y+7, r18	; 0x07
 4da:	38 87       	std	Y+8, r19	; 0x08
 4dc:	49 87       	std	Y+9, r20	; 0x09
 4de:	5a 87       	std	Y+10, r21	; 0x0a
 4e0:	6b 87       	std	Y+11, r22	; 0x0b
 4e2:	7c 87       	std	Y+12, r23	; 0x0c
 4e4:	8d 87       	std	Y+13, r24	; 0x0d
 4e6:	9e 87       	std	Y+14, r25	; 0x0e
 4e8:	45 01       	movw	r8, r10
	
	for (uint8_t i = 0; i < strlen(string); i++){
 4ea:	b1 2c       	mov	r11, r1
 4ec:	14 c0       	rjmp	.+40     	; 0x516 <__stack+0x17>
		
		vfd_putc(vfd_ctrl, string[i]);
 4ee:	f4 01       	movw	r30, r8
 4f0:	e8 0f       	add	r30, r24
 4f2:	f9 1f       	adc	r31, r25
 4f4:	a0 80       	ld	r10, Z
 4f6:	c9 80       	ldd	r12, Y+1	; 0x01
 4f8:	da 80       	ldd	r13, Y+2	; 0x02
 4fa:	eb 80       	ldd	r14, Y+3	; 0x03
 4fc:	fc 80       	ldd	r15, Y+4	; 0x04
 4fe:	0d 81       	ldd	r16, Y+5	; 0x05
 500:	1e 81       	ldd	r17, Y+6	; 0x06
 502:	2f 81       	ldd	r18, Y+7	; 0x07
 504:	38 85       	ldd	r19, Y+8	; 0x08
 506:	49 85       	ldd	r20, Y+9	; 0x09
 508:	5a 85       	ldd	r21, Y+10	; 0x0a
 50a:	6b 85       	ldd	r22, Y+11	; 0x0b
 50c:	7c 85       	ldd	r23, Y+12	; 0x0c
 50e:	8d 85       	ldd	r24, Y+13	; 0x0d
 510:	9e 85       	ldd	r25, Y+14	; 0x0e
 512:	2d df       	rcall	.-422    	; 0x36e <vfd_putc>
}


void vfd_puts(Vfd_ctrl vfd_ctrl, char *string){
	
	for (uint8_t i = 0; i < strlen(string); i++){
 514:	b3 94       	inc	r11
 516:	8b 2d       	mov	r24, r11
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	f4 01       	movw	r30, r8
 51c:	01 90       	ld	r0, Z+
 51e:	00 20       	and	r0, r0
 520:	e9 f7       	brne	.-6      	; 0x51c <__stack+0x1d>
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	e8 19       	sub	r30, r8
 526:	f9 09       	sbc	r31, r9
 528:	8e 17       	cp	r24, r30
 52a:	9f 07       	cpc	r25, r31
 52c:	00 f3       	brcs	.-64     	; 0x4ee <vfd_puts+0x4a>
		
		vfd_putc(vfd_ctrl, string[i]);
		
	}
	
}
 52e:	2e 96       	adiw	r28, 0x0e	; 14
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	df 90       	pop	r13
 548:	cf 90       	pop	r12
 54a:	bf 90       	pop	r11
 54c:	af 90       	pop	r10
 54e:	9f 90       	pop	r9
 550:	8f 90       	pop	r8
 552:	08 95       	ret

00000554 <vfd_reset>:


// void vfd_customFont(Vfd_ctrl vfd_ctrl);


void vfd_reset(Vfd_ctrl vfd_ctrl){
 554:	3f 92       	push	r3
 556:	4f 92       	push	r4
 558:	5f 92       	push	r5
 55a:	6f 92       	push	r6
 55c:	7f 92       	push	r7
 55e:	8f 92       	push	r8
 560:	9f 92       	push	r9
 562:	af 92       	push	r10
 564:	bf 92       	push	r11
 566:	cf 92       	push	r12
 568:	df 92       	push	r13
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	2e 97       	sbiw	r28, 0x0e	; 14
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
 586:	c9 82       	std	Y+1, r12	; 0x01
 588:	da 82       	std	Y+2, r13	; 0x02
 58a:	eb 82       	std	Y+3, r14	; 0x03
 58c:	fc 82       	std	Y+4, r15	; 0x04
 58e:	0d 83       	std	Y+5, r16	; 0x05
 590:	1e 83       	std	Y+6, r17	; 0x06
 592:	2f 83       	std	Y+7, r18	; 0x07
 594:	38 87       	std	Y+8, r19	; 0x08
 596:	49 87       	std	Y+9, r20	; 0x09
 598:	5a 87       	std	Y+10, r21	; 0x0a
 59a:	6b 87       	std	Y+11, r22	; 0x0b
 59c:	7c 87       	std	Y+12, r23	; 0x0c
 59e:	8d 87       	std	Y+13, r24	; 0x0d
 5a0:	9e 87       	std	Y+14, r25	; 0x0e
	vfd_putcmd(vfd_ctrl, 0x50);
 5a2:	0f 2e       	mov	r0, r31
 5a4:	f0 e5       	ldi	r31, 0x50	; 80
 5a6:	af 2e       	mov	r10, r31
 5a8:	f0 2d       	mov	r31, r0
 5aa:	2f df       	rcall	.-418    	; 0x40a <vfd_putcmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ac:	2f ef       	ldi	r18, 0xFF	; 255
 5ae:	80 e7       	ldi	r24, 0x70	; 112
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	80 40       	sbci	r24, 0x00	; 0
 5b6:	90 40       	sbci	r25, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <vfd_reset+0x5e>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <vfd_reset+0x68>
 5bc:	00 00       	nop
	_delay_ms(100);
 5be:	2e 96       	adiw	r28, 0x0e	; 14
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	9f 90       	pop	r9
 5e0:	8f 90       	pop	r8
 5e2:	7f 90       	pop	r7
 5e4:	6f 90       	pop	r6
 5e6:	5f 90       	pop	r5
 5e8:	4f 90       	pop	r4
 5ea:	3f 90       	pop	r3
 5ec:	08 95       	ret

000005ee <vfd_init>:
#include <util/delay.h>
#include <string.h>
#include "vfd.h"


void vfd_init(Vfd_ctrl vfd_ctrl){
 5ee:	cf 92       	push	r12
 5f0:	df 92       	push	r13
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	2e 97       	sbiw	r28, 0x0e	; 14
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	c9 82       	std	Y+1, r12	; 0x01
 610:	da 82       	std	Y+2, r13	; 0x02
 612:	eb 82       	std	Y+3, r14	; 0x03
 614:	fc 82       	std	Y+4, r15	; 0x04
 616:	0d 83       	std	Y+5, r16	; 0x05
 618:	1e 83       	std	Y+6, r17	; 0x06
 61a:	2f 83       	std	Y+7, r18	; 0x07
 61c:	38 87       	std	Y+8, r19	; 0x08
 61e:	49 87       	std	Y+9, r20	; 0x09
 620:	5a 87       	std	Y+10, r21	; 0x0a
 622:	6b 87       	std	Y+11, r22	; 0x0b
 624:	7c 87       	std	Y+12, r23	; 0x0c
 626:	8d 87       	std	Y+13, r24	; 0x0d
 628:	9e 87       	std	Y+14, r25	; 0x0e
	
	*vfd_ctrl.vfd_wr_port |= vfd_ctrl.vfd_wr_pin_mask;	// High
 62a:	8d 81       	ldd	r24, Y+5	; 0x05
 62c:	e9 81       	ldd	r30, Y+1	; 0x01
 62e:	fa 81       	ldd	r31, Y+2	; 0x02
 630:	90 81       	ld	r25, Z
 632:	89 2b       	or	r24, r25
 634:	80 83       	st	Z, r24
	*vfd_ctrl.vfd_wr_ddr |= vfd_ctrl.vfd_wr_pin_mask;	// Output
 636:	8d 81       	ldd	r24, Y+5	; 0x05
 638:	eb 81       	ldd	r30, Y+3	; 0x03
 63a:	fc 81       	ldd	r31, Y+4	; 0x04
 63c:	90 81       	ld	r25, Z
 63e:	89 2b       	or	r24, r25
 640:	80 83       	st	Z, r24
	
	*vfd_ctrl.vfd_a0_port |= vfd_ctrl.vfd_a0_pin_mask;	// High
 642:	8a 85       	ldd	r24, Y+10	; 0x0a
 644:	ee 81       	ldd	r30, Y+6	; 0x06
 646:	ff 81       	ldd	r31, Y+7	; 0x07
 648:	90 81       	ld	r25, Z
 64a:	89 2b       	or	r24, r25
 64c:	80 83       	st	Z, r24
	*vfd_ctrl.vfd_a0_ddr |= vfd_ctrl.vfd_a0_pin_mask;	// Output
 64e:	8a 85       	ldd	r24, Y+10	; 0x0a
 650:	e8 85       	ldd	r30, Y+8	; 0x08
 652:	f9 85       	ldd	r31, Y+9	; 0x09
 654:	90 81       	ld	r25, Z
 656:	89 2b       	or	r24, r25
 658:	80 83       	st	Z, r24
	
	*vfd_ctrl.vfd_data_port = 0x00;
 65a:	eb 85       	ldd	r30, Y+11	; 0x0b
 65c:	fc 85       	ldd	r31, Y+12	; 0x0c
 65e:	10 82       	st	Z, r1
	*vfd_ctrl.vfd_data_ddr = 0xFF;
 660:	ed 85       	ldd	r30, Y+13	; 0x0d
 662:	fe 85       	ldd	r31, Y+14	; 0x0e
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	80 83       	st	Z, r24
	
	vfd_reset(vfd_ctrl);
 668:	8d 85       	ldd	r24, Y+13	; 0x0d
 66a:	9e 85       	ldd	r25, Y+14	; 0x0e
 66c:	73 df       	rcall	.-282    	; 0x554 <vfd_reset>
	
}
 66e:	2e 96       	adiw	r28, 0x0e	; 14
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	ff 90       	pop	r15
 684:	ef 90       	pop	r14
 686:	df 90       	pop	r13
 688:	cf 90       	pop	r12
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
